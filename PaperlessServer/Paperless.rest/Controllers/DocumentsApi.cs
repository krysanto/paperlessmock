/*
 * Mock Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Paperless.rest.Attributes;
using Paperless.rest.Models;
using Microsoft.Extensions.Logging;
using Paperless.rabbitmq;
using Microsoft.EntityFrameworkCore;
using Minio;
using Minio.DataModel.Args;
using System.Net.Mime;
using System.Security.AccessControl;
using CommunityToolkit.HighPerformance.Helpers;
using System.Threading.Tasks;
using System.Linq;
using System.Text;

namespace Paperless.rest.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DocumentsApiController : ControllerBase
    {
        private readonly IQueueProducer _queueProducer;
        private readonly ILogger<DocumentsApiController> _logger;
        private readonly DefaultDbContext _context;
        private readonly IMinioClient _minioClient;

        public DocumentsApiController(IQueueProducer queueProducer, ILogger<DocumentsApiController> logger, DefaultDbContext context, IMinioClient minioClient)
        {
            _queueProducer = queueProducer;
            _logger = logger;
            _context = context;
            _minioClient = minioClient;

        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <response code="200">Success</response>
        [HttpDelete]
        [Route("/api/documents/{id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteDocument")]
        public virtual async Task<IActionResult> DeleteDocument([FromRoute(Name = "id")][Required] int id)
        {
            try
            {
                var document = await _context.Documents.FindAsync(id);
                if (document == null)
                {
                    _logger.LogInformation($"Document with id {id} not found.");
                    return NotFound();
                }
                
                var bucketName = "documents";
                var uniqueFileName = document.StoragePath;
                
                try
                {
                    await _minioClient.RemoveObjectAsync(new RemoveObjectArgs()
                        .WithBucket(bucketName)
                        .WithObject(uniqueFileName));
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, $"Error occurred while deleting file from MinIO: {uniqueFileName}");
                }

                _context.Documents.Remove(document);
                await _context.SaveChangesAsync();

                _logger.LogInformation($"Document with id {id} and file {uniqueFileName} deleted successfully.");
                return Ok(StatusCode(200));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error occurred while deleting the document.");
                return StatusCode(500, "An error occurred while deleting the document.");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="original"></param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/api/documents/{id}/download")]
        [ValidateModelState]
        [SwaggerOperation("DownloadDocument")]
        public virtual IActionResult DownloadDocument([FromRoute(Name = "id")][Required] int id, [FromQuery(Name = "original")] bool? original)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/api/documents/{id}/metadata")]
        [ValidateModelState]
        [SwaggerOperation("GetDocumentMetadata")]
        public virtual async Task<IActionResult> GetDocumentMetadata([FromRoute(Name = "id")][Required] int id)
        {
            try
            {
                var document = await _context.Documents.FindAsync(id);
                if (document == null)
                {
                    _logger.LogInformation($"Document with id {id} not found.");
                    return NotFound(new { message = $"Document with id {id} not found." });
                }

                return StatusCode(200, document);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error occurred while retrieving document metadata.");
                return StatusCode(500, "An error occurred while retrieving document metadata.");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/api/documents/{id}/preview")]
        [ValidateModelState]
        [SwaggerOperation("GetDocumentPreview")]
        public virtual IActionResult GetDocumentPreview([FromRoute(Name = "id")][Required] int id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/api/documents/{id}/thumb")]
        [ValidateModelState]
        [SwaggerOperation("GetDocumentThumb")]
        public virtual IActionResult GetDocumentThumb([FromRoute(Name = "id")][Required] int id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="query"></param>
        /// <param name="ordering"></param>
        /// <param name="tagsIdAll"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="correspondentId"></param>
        /// <param name="truncateContent"></param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/api/documents")]
        [ValidateModelState]
        [SwaggerOperation("GetDocuments")]
        public virtual IActionResult GetDocuments([FromQuery(Name = "Page")] int? page, [FromQuery(Name = "page_size")] int? pageSize, [FromQuery(Name = "query")] string query, [FromQuery(Name = "ordering")] string ordering, [FromQuery(Name = "tags__id__all")] List<int> tagsIdAll, [FromQuery(Name = "document_type__id")] int? documentTypeId, [FromQuery(Name = "correspondent__id")] int? correspondentId, [FromQuery(Name = "truncate_content")] bool? truncateContent)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="document"></param>
        /// <response code="200">Success</response>
        [HttpPut]
        [Route("/api/documents/{id}")]
        [Consumes("application/json", "text/json", "application/*+json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateDocument")]
        public virtual async Task<IActionResult> UpdateDocument([FromRoute(Name = "id")][Required] int id, [FromBody] Document document)
        {
            if (document == null)
            {
                return BadRequest("Document data is null.");
            }

            try
            {
                var existingDocument = await _context.Documents.FindAsync(id);
                if (existingDocument == null)
                {
                    return NotFound($"Document with id {id} not found.");
                }

                existingDocument.DocumentType = document.DocumentType;
                existingDocument.Title = document.Title;
                existingDocument.Content = document.Content;
                existingDocument.Created = document.Created;
                existingDocument.Modified = document.Modified;

                _context.Documents.Update(existingDocument);
                await _context.SaveChangesAsync();
                
                return StatusCode(200, "Document updated successfully.");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error occurred while updating the document.");
                return StatusCode(500, "An error occurred while updating the document.");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="title"></param>
        /// <param name="created"></param>
        /// <param name="documentType"></param>
        /// <param name="tags"></param>
        /// <param name="correspondent"></param>
        /// <param name="document"></param>
        /// <response code="200">Success</response>
        [HttpPost]
        [Route("/api/documents/post_document")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [SwaggerOperation("UploadDocument")]

        public virtual async Task<IActionResult> UploadDocument([FromForm(Name = "title")] string title, [FromForm(Name = "created")] DateTime? created, [FromForm(Name = "document_type")] int? documentType, [FromForm(Name = "tags")] List<int> tags, [FromForm(Name = "correspondent")] int? correspondent, [FromForm(Name = "document")] IFormFile document)
        {
            _logger.LogInformation("Post Document");
            Guid correspondentId = Guid.NewGuid();

            try
            {
                var bucketName = "documents";
                var uniqueFileName = correspondentId + Path.GetExtension(document.FileName);

                var bucketExists = await _minioClient.BucketExistsAsync(new BucketExistsArgs().WithBucket(bucketName));
                if (!bucketExists)
                {
                    await _minioClient.MakeBucketAsync(new MakeBucketArgs().WithBucket(bucketName));
                }

                using (var documentStream = document.OpenReadStream())
                {
                    var putObjectArgs = new PutObjectArgs()
                        .WithBucket(bucketName)
                        .WithObject(uniqueFileName)
                        .WithStreamData(documentStream)
                        .WithObjectSize(document.Length)
                        .WithContentType(document.ContentType);

                    await _minioClient.PutObjectAsync(putObjectArgs);

                }

                var metaData = new Document
                {
                    DocumentType = document.ContentType,
                    Title = Path.GetExtension(document.FileName),
                    Created = created ?? DateTime.UtcNow,
                    Modified = DateTime.UtcNow,
                    StoragePath = uniqueFileName,
                    Content = "To Be Updated by OCR",
                };

                _context.Documents.Add(metaData);
                await _context.SaveChangesAsync();

                _logger.LogInformation($"Successfully uploaded file: {title}");

                _queueProducer.Send(uniqueFileName, correspondentId);
                _logger.LogInformation($"{title} added to OCR_QUEUE Successfully!");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(500, "An error occurred during file upload.");
            }

            return Ok(StatusCode(200));
        }
    }
}
