/*
 * Mock Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Paperless.rest.Attributes;
using Microsoft.Extensions.Logging;
using Paperless.SearchLibrary;
using System.Threading.Tasks;

namespace Paperless.rest.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SearchApiController : ControllerBase
    {
        private readonly ILogger<DocumentsApiController> _logger;
        private readonly ISearchIndex _elastic;

        public SearchApiController(ILogger<DocumentsApiController> logger, ISearchIndex elastic)
        {
            _logger = logger;
            _elastic = elastic;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="term"></param>
        /// <param name="limit"></param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/api/search/autocomplete")]
        [ValidateModelState]
        [SwaggerOperation("AutoComplete")]
        public virtual async Task<IActionResult> AutoComplete([FromQuery(Name = "term")] string term, [FromQuery(Name = "limit")] int? limit)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(term))
                {
                    return BadRequest("Search term is required.");
                }

                var results = await _elastic.SearchDocumentAsync(term, limit);
                return Ok(results);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error occurred while performing autocomplete search.");
                return StatusCode(500, "An error occurred during the search.");
            }
            return StatusCode(200);
        }
    }
}
